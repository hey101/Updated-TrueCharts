image:
  repository: ghcr.io/elfhosted/lidarr
  pullPolicy: IfNotPresent
  tag: 2.10.3.4602@sha256:0313dc0bf41afbd894940ce66f3b801738dcc3208a68ac0b2290160a47b63f1e
exportarrImage:
  repository: ghcr.io/onedr0p/exportarr
  pullPolicy: IfNotPresent
  tag: v2.0.1@sha256:727e7bc8f2f0934a2117978c59f4476b954018b849a010ea6cfb380bd6539644
securityContext:
  container:
    readOnlyRootFilesystem: false
service:
  main:
    ports:
      main:
        port: 8686
  metrics:
    enabled: true
    type: ClusterIP
    targetSelector: exportarr
    ports:
      metrics:
        enabled: true
        port: 8687
        targetSelector: exportarr
workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              enabled: true
              type: http
              path: /ping
            readiness:
              enabled: true
              type: http
              path: /ping
            startup:
              enabled: true
              type: http
              path: /ping
          env:
            LIDARR__PORT: "{{ .Values.service.main.ports.main.port }}"
            LIDARR__AUTHENTICATION_METHOD: ""
  exportarr:
    enabled: true
    type: Deployment
    strategy: RollingUpdate
    replicas: 1
    podSpec:
      containers:
        exportarr:
          primary: true
          enabled: true
          imageSelector: exportarrImage
          args:
          - lidarr
          probes:
            liveness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            readiness:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
            startup:
              enabled: true
              type: http
              path: /healthz
              port: "{{ .Values.service.metrics.ports.metrics.port }}"
          env:
            INTERFACE: 0.0.0.0
            PORT: "{{ .Values.service.metrics.ports.metrics.port }}"
            URL: '{{ printf "http://%v:%v" (include "tc.v1.common.lib.chart.names.fullname" $) .Values.service.main.ports.main.port }}'
            # additional metrics (slow)
            # ENABLE_ADDITIONAL_METRICS: false
            # enable gathering unknown queue items
            # ENABLE_UNKNOWN_QUEUE_ITEMS: false
            CONFIG: "/config/config.xml"
persistence:
  config:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /config
      exportarr:
        exportarr:
          mountPath: /config
          readOnly: true
metrics:
  main:
    enabled: true
    type: "servicemonitor"
    endpoints:
    - port: metrics
      path: /metrics
    targetSelector: metrics
    prometheusRule:
      enabled: false
portal:
  open:
    enabled: true
updated: true
